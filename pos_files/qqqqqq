GETCONTEXT(3)              Linux Programmer's Manual             GETCONTEXT(3)

[1mNAME[0m
       getcontext, setcontext - get or set the user context

[1mSYNOPSIS[0m
       [1m#include <ucontext.h>[0m

       [1mint getcontext(ucontext_t *[4m[22mucp[24m[1m);[0m
       [1mint setcontext(const ucontext_t *[4m[22mucp[24m[1m);[0m

[1mDESCRIPTION[0m
       In  a  System  V-like environment, one has the two types [4mmcontext_t[24m and
       [4mucontext_t[24m defined in [4m<ucontext.h>[24m and the four functions [1mgetcontext[22m(),
       [1msetcontext[22m(),  [1mmakecontext[22m(3), and [1mswapcontext[22m(3) that allow user-level
       context switching between multiple threads of control within a process.

       The [4mmcontext_t[24m type is machine-dependent and  opaque.   The  [4mucontext_t[0m
       type is a structure that has at least the following fields:

           typedef struct ucontext_t {
               struct ucontext_t *uc_link;
               sigset_t          uc_sigmask;
               stack_t           uc_stack;
               mcontext_t        uc_mcontext;
               ...
           } ucontext_t;

       with  [4msigset_t[24m  and [4mstack_t[24m defined in [4m<signal.h>[24m.  Here [4muc_link[24m points
       to the context that will be resumed when the current context terminates
       (in case the current context was created using [1mmakecontext[22m(3)), [4muc_sig‐[0m
       [4mmask[24m is the set of  signals  blocked  in  this  context  (see  [1msigproc‐[0m
       [1mmask[22m(2)),  [4muc_stack[24m  is  the  stack  used  by this context (see [1msigalt‐[0m
       [1mstack[22m(2)), and [4muc_mcontext[24m is the  machine-specific  representation  of
       the  saved  context,  that includes the calling thread's machine regis‐
       ters.

       The function [1mgetcontext[22m() initializes the structure pointed at  by  [4mucp[0m
       to the currently active context.

       The  function [1msetcontext[22m() restores the user context pointed at by [4mucp[24m.
       A successful call does  not  return.   The  context  should  have  been
       obtained  by  a  call  of [1mgetcontext[22m(), or [1mmakecontext[22m(3), or passed as
       third argument to a signal handler.

       If the context was obtained by a call of [1mgetcontext[22m(),  program  execu‐
       tion continues as if this call just returned.

       If the context was obtained by a call of [1mmakecontext[22m(3), program execu‐
       tion continues by a call to the function [4mfunc[24m specified as  the  second
       argument  of  that  call  to  [1mmakecontext[22m(3).   When  the function [4mfunc[0m
       returns, we continue with the [4muc_link[24m member of the structure [4mucp[24m spec‐
       ified  as the first argument of that call to [1mmakecontext[22m(3).  When this
       member is NULL, the thread exits.

       If the context was obtained by a call to a  signal  handler,  then  old
       standard  text  says that "program execution continues with the program
       instruction following the instruction interrupted by the signal".  How‐
       ever,  this  sentence  was removed in SUSv2, and the present verdict is
       "the result is unspecified".

[1mRETURN VALUE[0m
       When successful, [1mgetcontext[22m()  returns  0  and  [1msetcontext[22m()  does  not
       return.  On error, both return -1 and set [4merrno[24m appropriately.

[1mERRORS[0m
       None defined.

[1mATTRIBUTES[0m
       For   an   explanation   of   the  terms  used  in  this  section,  see
       [1mattributes[22m(7).

       ┌───────────────────────────┬───────────────┬──────────────────┐
       │[1mInterface                  [22m│ [1mAttribute     [22m│ [1mValue            [22m│
       ├───────────────────────────┼───────────────┼──────────────────┤
       │[1mgetcontext[22m(), [1msetcontext[22m() │ Thread safety │ MT-Safe race:ucp │
       └───────────────────────────┴───────────────┴──────────────────┘
[1mCONFORMING TO[0m
       SUSv2, POSIX.1-2001.  POSIX.1-2008 removes the specification of [1mgetcon‐[0m
       [1mtext[22m(),  citing  portability issues, and recommending that applications
       be rewritten to use POSIX threads instead.

[1mNOTES[0m
       The earliest incarnation of this mechanism was the [1msetjmp[22m(3)/[1mlongjmp[22m(3)
       mechanism.   Since that does not define the handling of the signal con‐
       text, the next stage  was  the  [1msigsetjmp[22m(3)/[1msiglongjmp[22m(3)  pair.   The
       present mechanism gives much more control.  On the other hand, there is
       no easy way to detect whether a return from [1mgetcontext[22m()  is  from  the
       first call, or via a [1msetcontext[22m() call.  The user has to invent her own
       bookkeeping device, and a register variable won't  do  since  registers
       are restored.

       When  a signal occurs, the current user context is saved and a new con‐
       text is created by the kernel for the signal handler.  Do not leave the
       handler  using  [1mlongjmp[22m(3): it is undefined what would happen with con‐
       texts.  Use [1msiglongjmp[22m(3) or [1msetcontext[22m() instead.

[1mSEE ALSO[0m
       [1msigaction[22m(2),  [1msigaltstack[22m(2),  [1msigprocmask[22m(2),  [1mlongjmp[22m(3),   [1mmakecon‐[0m
       [1mtext[22m(3), [1msigsetjmp[22m(3)

[1mCOLOPHON[0m
       This  page  is  part of release 4.16 of the Linux [4mman-pages[24m project.  A
       description of the project, information about reporting bugs,  and  the
       latest     version     of     this    page,    can    be    found    at
       https://www.kernel.org/doc/man-pages/.

Linux                             2017-09-15                     GETCONTEXT(3)
